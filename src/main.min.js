document.addEventListener("click", (e) => {
  if (e.target.closest(".vb-item__apply")) {
    e.preventDefault();
    const btn = e.target.closest(".vb-item__apply");
    const modalStatus = e.target.closest(".modal-dialog");
    const input = btn.querySelector("input");
    if (!input.checked) {
      input.checked = !input.checked;
    }
    if (input.checked) {
      let status = "success";
      const template = document.createElement("template");
      if (status === "success") {
        template.innerHTML = `<div class="modal-status">
                <img src="images/info.svg" alt="" class="modal-status__icon">
                <div class="modal-status__title"><strong>Đã áp dụng</strong> mã voucher POLO15 vào giỏ hàng của bạn</div>
            </div>`;
      } else {
        template.innerHTML = `<div class="modal-status">
            <img src="images/info.svg" alt="" class="modal-status__icon">
                <div class="modal-status__title"><strong>Opps!</strong> Voucher chỉ áp dụng cho đơn hàng trên <strong>1.000.000đ.</strong> Bạn còn thiếu (500k) nữa.</div>
            </div>`;
      }
      const statusEl = template.content.firstElementChild;
      modalStatus.insertAdjacentElement("afterbegin", statusEl);
      setTimeout(() => {
        statusEl.remove();
      }, 2000);
    }
  }

  if (e.target.closest(".js-gallery__item")) {
    e.preventDefault();
    const item = e.target.closest(".js-gallery__item");
    const wrap = item.closest(".js-gallery");
    let thumbs = wrap.dataset.thumb;
    if (!thumbs) {
      return;
    }
    thumbs = JSON.parse(thumbs);
    const template = document.createElement("template");
    const gallerySliderString = `<div class="js-gallery-slider">
                                            <div class="swiper-button-prev swiper-button-prev--2"></div>
                                            <div class="swiper-container">
                                                <div class="swiper-wrapper">
                                                    ${thumbs
                                                      .map((thumb) => {
                                                        if (
                                                          thumb.type === "video"
                                                        ) {
                                                          return `<div class="swiper-slide"><div class="ratio">
                                                                <video controls>
                                                                  <source src="${thumb.src}" type="video/mp4">
                                                                  Your browser does not support the video tag.
                                                                </video>
                                                            </div>
                                                         </div>`;
                                                        }
                                                        return `<div class="swiper-slide"><div class="ratio"> <img src="${thumb.src}" alt=""></div></div>`;
                                                      })
                                                      .join("")}
                                                </div>
                                            </div>
                                            <div class="swiper-button-next swiper-button-next--2"></div>
                                        </div>`;
    const gallerySliderThumbsString = `<div class="js-gallery-slider-thumbs">
                                            <div class="swiper-button-prev"></div>
                                            <div class="swiper-container">
                                                <div class="swiper-wrapper">
                                                    ${thumbs
                                                      .map(
                                                        (thumb) =>
                                                          `<div class="swiper-slide"><div class="ratio ${
                                                            thumb.type ===
                                                            "video"
                                                              ? "video-overlay"
                                                              : ""
                                                          }"><img src="${
                                                            thumb.thumb
                                                          }" alt=""></div></div>`
                                                      )
                                                      .join("")}
                                                </div>
                                            </div>
                                            <div class="swiper-button-next"></div>
                                        </div>`;
    const modalString = `<div class="modal fade modal-custom js-gallery-modal" id="jsGalleryModal" tabindex="-1"
                             aria-labelledby="jsGalleryModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-dialog--937">
                                <div class="modal-content">
                                    <div class="modal-body">
                                       <button class="btn-close btn-close--14" data-bs-dismiss="modal"></button>
                                       ${gallerySliderString}
                                       ${gallerySliderThumbsString}
                                    </div>
                                </div>
                            </div>
                        </div>`;
    template.innerHTML = modalString;
    const modalEl = template.content.firstElementChild;

    const galleryInit = () => {
      const slider = modalEl.querySelector(".js-gallery-slider");
      const sliderContainer = slider.querySelector(".swiper-container");
      const sliderBtnPrev = slider.querySelector(".swiper-button-prev");
      const sliderBtnNext = slider.querySelector(".swiper-button-next");

      const sliderThumbs = modalEl.querySelector(".js-gallery-slider-thumbs");
      const sliderThumbsContainer =
        sliderThumbs.querySelector(".swiper-container");
      const sliderThumbsBtnPrev = sliderThumbs.querySelector(
        ".swiper-button-prev"
      );
      const sliderThumbsBtnNext = sliderThumbs.querySelector(
        ".swiper-button-next"
      );

      const sliderThumbsInit = new Swiper(sliderThumbsContainer, {
        slidesPerView: 7,
        spaceBetween: 10,
        loop: false,
        speed: 800,
        // autoplay: {
        //     delay: 3000,
        //     disableOnInteraction: false
        // },
        navigation: {
          nextEl: sliderThumbsBtnNext,
          prevEl: sliderThumbsBtnPrev,
        },
      });

      const sliderInit = new Swiper(sliderContainer, {
        init: false,
        slidesPerView: 1,
        spaceBetween: 10,
        loop: false,
        speed: 800,
        // autoplay: {
        //     delay: 3000,
        //     disableOnInteraction: false
        // },
        navigation: {
          nextEl: sliderBtnNext,
          prevEl: sliderBtnPrev,
        },
        thumbs: {
          swiper: sliderThumbsInit,
        },
      });

      const playPauseVideo = (swiper) => {
        swiper.el.querySelectorAll("video").forEach((video) => video.pause());
        const currentSlide = swiper.slides[swiper.realIndex];
        const currentSlideVideo = currentSlide.querySelector("video");
        if (currentSlideVideo) {
          currentSlideVideo.play();
        }
      };
      sliderInit.on("init", (swiper) => {
        playPauseVideo(swiper);
      });
      sliderInit.on("slideChangeTransitionEnd", (swiper) => {
        playPauseVideo(swiper);
      });
      sliderInit.init();
    };

    document.documentElement.appendChild(modalEl);
    const bsModal = new bootstrap.Modal(modalEl);
    modalEl.addEventListener("shown.bs.modal", (e) => {
      galleryInit();
    });
    modalEl.addEventListener("hidden.bs.modal", (e) => {
      modalEl.remove();
    });
    bsModal.show();
  }

  if (e.target.closest(".js-select .js-select__control")) {
    const control = e.target.closest(".js-select .js-select__control");
    const dropdown = control
      .closest(".js-select")
      .querySelector(".js-select__dropdown");
    if (dropdown) {
      dropdown.classList.toggle("show");
    }
  }

  if (e.target.closest(".js-select .js-select__dropdown li")) {
    const liSelected = e.target.closest(".js-select .js-select__dropdown li");
    const control = liSelected
      .closest(".js-select")
      .querySelector(".js-select__control");
    const dropdown = liSelected
      .closest(".js-select")
      .querySelector(".js-select__dropdown");
    dropdown
      .querySelectorAll("li")
      .forEach((li) => li.classList.remove("active"));
    liSelected.classList.add("active");
    if (control) {
      control.value = liSelected.textContent;
    }
    dropdown.classList.remove("show");
  }

  if (e.target.closest(".js-btn-copy")) {
    const btn = e.target.closest(".js-btn-copy");
    if (btn.dataset.value) {
      copyToClipboard(btn.dataset.value);
    }
  }

  // if (e.target.closest('#buyer-info .buyer-info__head__btn')) {
  //     e.preventDefault();
  //     toggleBuyInfo();
  // }

  if (e.target.closest(".js-toggle-btn")) {
    e.preventDefault();
    const btn = e.target.closest(".js-toggle-btn");
    const collapse = document.querySelector(btn.dataset.target);
    if (!collapse) {
      return;
    }
    const isShowing = collapse.classList.contains("active");
    document
      .querySelectorAll(".js-toggle-btn.active, .js-toggle-collapse.active")
      .forEach((el) => el.classList.remove("active"));
    collapse.classList.toggle("active", !isShowing);
    btn.classList.toggle("active", !isShowing);
  } else if (
    e.target.closest(".js-close-btn") ||
    !e.target.closest(".js-toggle-collapse")
  ) {
    document
      .querySelectorAll(".js-toggle-btn.active, .js-toggle-collapse.active")
      .forEach((el) => el.classList.remove("active"));
  }

  if (e.target.closest(".sub-menu__link")) {
    e.preventDefault();
    const link = e.target.closest(".sub-menu__link");
    const collapseEl = link.nextElementSibling;

    if (!collapseEl) {
      return;
    }

    e.preventDefault();
    collapseEl.addEventListener("hide.bs.collapse", () => {
      link.classList.remove("rotate");
    });

    collapseEl.addEventListener("show.bs.collapse", () => {
      link.classList.add("rotate");
    });

    new bootstrap.Collapse(collapseEl);
  }

  if (e.target.closest(".order-item__bottom__btn")) {
    const btn = e.target.closest(".order-item__bottom__btn");
    const collapseEl = btn
      .closest(".order-item")
      .querySelector(".order-item__collapse");

    if (!collapseEl) {
      return;
    }

    collapseEl.addEventListener("hide.bs.collapse", () => {
      btn.classList.remove("rotate");
    });

    collapseEl.addEventListener("show.bs.collapse", () => {
      btn.classList.add("rotate");
    });

    new bootstrap.Collapse(collapseEl);
  }

  if (e.target.closest(".toggle-video-btn")) {
    const btn = e.target.closest(".toggle-video-btn");
    const videoId = btn.dataset.video;
    const video = document.querySelector(videoId);

    if (!video || video.progress) {
      return;
    }
    if (video.paused === true) {
      video.play();
      btn.classList.remove("pause");
    } else {
      video.pause();
      btn.classList.add("pause");
    }
  }

  if (e.target.closest(".add-to-cart-modal .add-to-cart-modal-btn")) {
    e.preventDefault();
    const addToCartBtn = e.target.closest(".add-to-cart-modal-btn");
    const addToCartModal = addToCartBtn.closest(".add-to-cart-modal");
    const addToCartImg = addToCartModal.querySelector(".add-to-cart-modal-img");

    const hdCart = document.getElementById("hd-cart");
    const hdCartIcon = hdCart && hdCart.querySelector("img");
    const hdCartAmount = hdCart && hdCart.querySelector("span");
    const loadingBox = document.getElementById("loading-box");

    bootstrap.Modal.getInstance(addToCartModal).hide();

    if (!addToCartImg || !hdCart || !hdCartIcon || !hdCartAmount) {
      return;
    }

    const {
      top: cartIconTop,
      left: cartIconLeft,
      width: cartIconWidth,
    } = hdCartIcon.getBoundingClientRect();
    const pdImgClone = addToCartImg.cloneNode();
    pdImgClone.style.position = "fixed";
    pdImgClone.style.zIndex = 99999;

    loadingBox && loadingBox.classList.add("show");
    setTimeout(() => {
      loadingBox && loadingBox.classList.remove("show");
      document.body.appendChild(pdImgClone);
      pdImgClone.animate(
        [
          {
            width: 100 + "%",
            top: 0 + "px",
            left: 0 + "px",
            opacity: 0.8,
          },
          {
            width: cartIconWidth + "px",
            top: cartIconTop + "px",
            left: cartIconLeft + "px",
            opacity: 0.4,
          },
        ],
        {
          duration: 500,
          easing: "ease",
        }
      ).onfinish = (e) => {
        e.target.effect.target.remove();
        hdCartAmount.textContent = Number(hdCartAmount.textContent) + 1;
        hdCart.classList.add("bounce");
        setTimeout(() => {
          hdCart.classList.remove("bounce");

          //SCROLL TO COMBO
          const comboSection = document.getElementById("combo-section");
          if (comboSection) {
            let offset = 0;
            const header = document.getElementById("header");
            if (header) {
              offset = header.offsetHeight;
            }
            scrollToSmoothly(comboSection.offsetTop - offset);
          }
        }, 1000);
      };
    }, 1000);
  }
});

document.addEventListener("click", (e) => {
  if (e.target.closest(".js-gallery-2 .js-gallery__item")) {
    e.preventDefault();
    const item = e.target.closest(".js-gallery__item");
    const wrap = item.closest(".js-gallery-2");
    let thumbs = wrap.dataset.thumb;
    if (!thumbs) {
      return;
    }
    thumbs = JSON.parse(thumbs);
    const template = document.createElement("template");
    const gallerySliderString = `<div class="js-gallery-slider-2">
                                        <div class="swiper-container">
                                            <div class="swiper-wrapper">
                                                ${thumbs
                                                  .map((thumb) => {
                                                    if (
                                                      thumb.type === "video"
                                                    ) {
                                                      return `<div class="swiper-slide">
                                                                    <div class="ratio">
                                                                        <video loop>
                                                                          <source src="${thumb.src}" type="video/mp4">
                                                                          Your browser does not support the video tag.
                                                                        </video>
                                                                    </div>
                                                                 </div>`;
                                                    }
                                                    return `<div class = "swiper-slide"><div class="ratio"><img src="${thumb.src}" alt=""></div></div>`;
                                                  })
                                                  .join("")}
                                            </div>
                                            <div class="swiper-pagination swiper-pagination-3"></div>
                                        </div>
                                    </div>`;
    const modalString = `<div class="modal fade modal-black js-gallery-modal-2" id="jsGalleryModal2" tabindex="-1"
                             aria-labelledby="jsGalleryModal2Label" aria-hidden="true">
                            <div class="modal-dialog modal-fullscreen">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <p class="modal-title"></p>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                       ${gallerySliderString}
                                    </div>
                                </div>
                            </div>
                        </div>`;
    template.innerHTML = modalString;
    const modalEl = template.content.firstElementChild;

    const galleryInit = () => {
      const slider = modalEl.querySelector(".js-gallery-slider-2");
      const sliderContainer = slider.querySelector(".swiper-container");
      const sliderPagination = slider.querySelector(".swiper-pagination");

      const sliderInit = new Swiper(sliderContainer, {
        init: false,
        slidesPerView: 1,
        spaceBetween: 5,
        loop: false,
        speed: 800,
        pagination: {
          el: sliderPagination,
          clickable: true,
        },
      });

      const playPauseVideo = (swiper) => {
        swiper.el.querySelectorAll("video").forEach((video) => video.pause());
        const currentSlide = swiper.slides[swiper.realIndex];
        const currentSlideVideo = currentSlide.querySelector("video");
        if (currentSlideVideo) {
          currentSlideVideo.play();
        }
      };

      sliderInit.on("init", (swiper) => {
        playPauseVideo(swiper);
      });

      sliderInit.on("slideChangeTransitionEnd", (swiper) => {
        playPauseVideo(swiper);
      });

      sliderInit.init();
    };

    document.body.appendChild(modalEl);
    const bsModal = new bootstrap.Modal(modalEl);
    modalEl.addEventListener("shown.bs.modal", (e) => {
      galleryInit();
    });
    modalEl.addEventListener("hidden.bs.modal", (e) => {
      modalEl.remove();
    });
    bsModal.show();
  }
});
